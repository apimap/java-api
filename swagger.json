{
  "openapi": "3.0.1",
  "info": {
    "title": "Apimap.io",
    "description": "Apimap.io is a centralized registry of our APIs. This API is built to comply with the JSON:API standard version 1.1 (https://jsonapi.org/)",
    "license": {
      "name": "Apache 2.0",
      "url": "https://www.apache.org/licenses/LICENSE-2.0"
    },
    "version": "1.4.1"
  },
  "servers": [
    {
      "url": "http://localhost:8080/",
      "description": "Generated server url"
    }
  ],
  "tags": [
    {
      "name": "API",
      "description": "Endpoints managing API related resources"
    },
    {
      "name": "CLASSIFICATION",
      "description": "Endpoints managing CLASSIFICATION related resources"
    },
    {
      "name": "STATISTICS",
      "description": "Endpoints managing STATISTICS related resources"
    },
    {
      "name": "TAXONOMY",
      "description": "Endpoints managing TAXONOMY related resources"
    },
    {
      "name": "START",
      "description": "The HATEOAS start point for exploring the API"
    }
  ],
  "paths": {
    "/statistics": {
      "get": {
        "tags": [
          "STATISTICS"
        ],
        "summary": "System statistics overview.",
        "operationId": "allStatistics",
        "responses": {
          "200": {
            "description": "Statistic collection",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Statistics Collection Item"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistics/apis": {
      "get": {
        "tags": [
          "STATISTICS"
        ],
        "summary": "Number of APIs registered in the system.",
        "operationId": "getApiCountStatistics",
        "responses": {
          "200": {
            "description": "Statistic collection",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistics/architecture-layer": {
      "get": {
        "tags": [
          "STATISTICS"
        ],
        "summary": "Number of APIs registered grouped by architecture layer.",
        "operationId": "getArchitectureLayerStatistics",
        "responses": {
          "200": {
            "description": "Statistic collection",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistics/interface-specification": {
      "get": {
        "tags": [
          "STATISTICS"
        ],
        "summary": "Number of APIs registered grouped by interface specification.",
        "operationId": "getInterfaceSpecificationStatistics",
        "responses": {
          "200": {
            "description": "Statistic collection",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/statistics/taxonomies": {
      "get": {
        "tags": [
          "STATISTICS"
        ],
        "summary": "Number of taxonomies registered in the system.",
        "operationId": "getTaxonomiesStatistics",
        "responses": {
          "200": {
            "description": "Statistic collection",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get all APIs registered in the system.",
        "operationId": "allApis",
        "parameters": [
          {
            "name": "filter[metadata]",
            "in": "query",
            "description": "Metadata filter built with the following expression: filter[metadata][\u003cfilter name\u003e]\u003d\u003cfilter value\u003e. If more than one value use , to separate the values.",
            "example": "filter[metadata][visibility]\u003dPublic"
          },
          {
            "name": "filter[classification]",
            "in": "query",
            "description": "Classification filter built with the following expression: filter[classification][\u003ctaxonomy name\u003e]\u003d\u003cclassification urn\u003e. If more than one value use , to separate the values.",
            "example": "filter[classification][apimap]\u003durn:apimap:89"
          },
          {
            "name": "filter[name]",
            "in": "query",
            "description": "Collection lookup by API name",
            "example": "filter[name]\u003dhello%20world"
          }
        ],
        "responses": {
          "200": {
            "description": "List of all available APIs",
            "content": {
              "*/*": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/API Collection Item"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Create a new API.",
        "description": "An API consist of a name, connected with multiple versions. Each version is then connected to the metadata and classifications. IMPORTANT: Note that upon creation this will return a token. This token is linked with the collection and must be used as a Bearer token with all following request.It is not possible to recreate this token, keep it in a safe place.",
        "operationId": "createApi",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/API Attributes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API created successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, a API with the same name already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      }
    },
    "/api/{apiName}": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get API information.",
        "description": "An API consist of a name, connected with multiple versions. Each version is then connected to the metadata and classifications.",
        "operationId": "getApi",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "API root object",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API"
                }
              }
            }
          },
          "404": {
            "description": "API not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "API"
        ],
        "summary": "Update API information.",
        "description": "This does not include metadata, versions or classifications. An API consist of a name, connected with multiple versions. Each version is then connected to the metadata and classifications.",
        "operationId": "updateApi",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/API Attributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API updated",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/API"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse incoming values",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Delete an API (including all versions, metadata and classifications)",
        "description": "This will delete all attached version, metadata and classifications. Thereby completely remove the API from the catalog.",
        "operationId": "deleteApi",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "API and all related information deleted successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/api/{apiName}/version": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get a overview of all API versions.",
        "operationId": "allApiVersions",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "API updated",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Create a new API version",
        "operationId": "createApiVersion",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/API Version Attributes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API Version Created Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/API Version"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse incoming values",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/api/{apiName}/version/{apiVersion}": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get a specific API version",
        "operationId": "getApiVersion",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "API Version",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/API Version"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Delete a specific API version (and connected metadata and classifications)",
        "operationId": "deleteApiVersion",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Delete Successful. All metadata and classifications associated with the version is also deleted.",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/API Version"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/api/{apiName}/version/{apiVersion}/classification": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get all classifications by apiName and apiVersion",
        "operationId": "getClassification",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "API Version Classification Deleted Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/Classification"
                  }
                }
              }
            }
          },
          "404": {
            "description": "No existing API or API Version found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      }
    },
    "/api/{apiName}/version/{apiVersion}/metadata": {
      "get": {
        "tags": [
          "API"
        ],
        "summary": "Get API version metadata",
        "operationId": "getMetadata",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "API Version Metadata Content",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "404": {
            "description": "No existing API or API Version found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "API"
        ],
        "summary": "Updated metadata",
        "operationId": "updateMetadata",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata Attributes"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "API Version Metadata Updated Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse incoming values",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API or API Version found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "post": {
        "tags": [
          "API"
        ],
        "summary": "Create a API version metadata",
        "operationId": "createMetadata",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Metadata Attributes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "API Version Metadata Created Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Metadata"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse incoming values",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API or API Version found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "API"
        ],
        "summary": "Delete API version metadata",
        "operationId": "deleteMetadata",
        "parameters": [
          {
            "name": "apiName",
            "in": "path",
            "description": "URL encoded API name",
            "required": true
          },
          {
            "name": "apiVersion",
            "in": "path",
            "description": "URL encoded API version identifier",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "API Version Metadata Deleted Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "404": {
            "description": "No existing API or API Version found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "": {
      "get": {
        "tags": [
          "START"
        ],
        "summary": "HATEOAS starting point.",
        "description": "This endpoint is mostly to enable HATEOAS navigation.",
        "operationId": "API starting point",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get all available taxonomy collections",
        "operationId": "allCollections",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Create a new taxonomy collection.",
        "description": "IMPORTANT: Note that upon creation this will return a token. This token is linked with the collection and must be used as a Bearer token with all following request. It is not possible to recreate this token, keep it in a safe place.",
        "operationId": "createCollection",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Taxonomy Collection Attributes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Taxonomy Collection Created Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Taxonomy Collection"
                }
              }
            }
          },
          "400": {
            "description": "Unable to parse incoming values",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          },
          "409": {
            "description": "Conflict, a API with the same name already exists",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy/{taxonomyNid}": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get a taxonomy collection.",
        "operationId": "getCollection",
        "parameters": [
          {
            "name": "taxonomyNid",
            "in": "path",
            "description": "URL encoded taxonomy NID",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Taxonomy Collection Content",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Taxonomy Collection"
                }
              }
            }
          },
          "404": {
            "description": "No existing taxonomy found",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Create a new taxonomy collection version",
        "operationId": "createVersion",
        "parameters": [
          {
            "name": "taxonomyNid",
            "in": "path",
            "description": "URL encoded taxonomy NID",
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Taxonomy Collection Attributes"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Taxonomy Collection Version Create",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Taxonomy Collection"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      },
      "delete": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Delete a taxonomy collection.",
        "description": "This deletes all taxonomy values associated with the taxonomy. APIs already classified with one of the options will retain their classification, although they will not be searchable.",
        "operationId": "deleteCollection",
        "parameters": [
          {
            "name": "taxonomyNid",
            "in": "path",
            "description": "URL encoded taxonomy NID",
            "required": true
          }
        ],
        "responses": {
          "204": {
            "description": "Taxonomy Collection Deleted Successfully",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/taxonomy/{taxonomyNid}/version": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get all taxonomy collection versions",
        "operationId": "allVersions",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      }
    },
    "/taxonomy/{taxonomyNid}/version/{taxonomyVersion}": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get a specific taxonomy collection version",
        "operationId": "getVersion",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Delete a taxonomy collection version",
        "operationId": "deleteVersion",
        "responses": {
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/taxonomy/{taxonomyNid}/version/{taxonomyVersion}/urn": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get all classification tree options",
        "operationId": "allURNs",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Create a new classification tree option",
        "operationId": "createURN",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Taxonomy Attributes"
              }
            }
          }
        },
        "responses": {
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/taxonomy/{taxonomyNid}/version/{taxonomyVersion}/urn/{urn}": {
      "get": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Get a specific classification tree option",
        "operationId": "getURN",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ServerResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "TAXONOMY"
        ],
        "summary": "Delete a classification tree option",
        "operationId": "deleteURN",
        "responses": {
          "401": {
            "description": "Unauthorized, valid bearer token missing og faulty",
            "content": {
              "*/*": {
                "schema": {
                  "$ref": "#/components/schemas/Json:api Container Object"
                }
              }
            }
          }
        },
        "security": [
          {
            "token": []
          }
        ]
      }
    },
    "/classification": {
      "get": {
        "tags": [
          "CLASSIFICATION"
        ],
        "summary": "Classification search entrypoint.",
        "description": "Please not that if no query is specified a blank array will always be returned. This is done since a complete database dump shouldn\u0027t be of any interest.",
        "operationId": "allClassifications",
        "parameters": [
          {
            "name": "filter[metadata]",
            "in": "query",
            "description": "Metadata filter built with the following expression: filter[metadata][\u003cfilter name\u003e]\u003d\u003cfilter value\u003e. If more than one value use , to separate the values.",
            "example": "filter[metadata][visibility]\u003dPublic"
          },
          {
            "name": "filter[classification]",
            "in": "query",
            "description": "Classification filter built with the following expression: filter[classification][\u003ctaxonomy name\u003e]\u003d\u003cclassification urn\u003e. If more than one value use , to separate the values.",
            "example": "filter[classification][apimap]\u003durn:apimap:89"
          },
          {
            "name": "query[field]",
            "in": "query",
            "description": "Metadata parameter to be search. Possible values are: name, description or system identifier",
            "example": "query[field]\u003dname, query[field]\u003ddescription, query[field]\u003dsystem identifier"
          },
          {
            "name": "query[value]",
            "in": "query",
            "description": "Search string. Will be transformed into regexp-\u003e word(.*)word(.*)",
            "example": "query[value]\u003dHello World"
          }
        ],
        "responses": {
          "200": {
            "description": "Search Completed Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classification Tree Item Attributes"
                }
              }
            }
          }
        }
      }
    },
    "/classification/{classificationURN}": {
      "get": {
        "tags": [
          "CLASSIFICATION"
        ],
        "summary": "List classification URN sub-nodes.",
        "description": "Please not that if no query is specified a blank array will always be returned. This is done since a complete database dump shouldn\u0027t be of any interest.",
        "operationId": "getClassification_1",
        "parameters": [
          {
            "name": "Classification URN",
            "in": "path",
            "description": "Request a specific URN sub-tree.",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "Search Completed Successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Classification Tree Item Attributes"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Statistics Collection Item": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "statistics:element"
          },
          "attributes": {
            "$ref": "#/components/schemas/Statistics Collection Item Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        }
      },
      "Statistics Collection Item Attributes": {
        "type": "object",
        "properties": {
          "description": {
            "type": "string"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "API Collection Item": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "api:element"
          },
          "relationships": {
            "$ref": "#/components/schemas/Relationships"
          },
          "attributes": {
            "$ref": "#/components/schemas/API Collection Item Attributes"
          },
          "links": {
            "$ref": "#/components/schemas/Links"
          }
        },
        "description": "Entity used to return lists of APIs"
      },
      "API Collection Item Attributes": {
        "required": [
          "description",
          "name",
          "status",
          "version"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "API name",
            "example": "Hello World"
          },
          "codeRepository": {
            "type": "string",
            "description": "URL to the main API code repository",
            "example": "http//github/helloworld"
          },
          "description": {
            "type": "string",
            "description": "API description",
            "example": "This Hello World API is used to create new worlds"
          },
          "status": {
            "type": "string",
            "description": "Lifecycle status of the API",
            "example": "In production"
          },
          "version": {
            "type": "string",
            "description": "Provided API version",
            "example": "1.0.0"
          },
          "documentation": {
            "type": "array",
            "description": "List of URLs where more documentation is to be found.",
            "example": "http://localhost/doc",
            "items": {
              "type": "string",
              "description": "List of URLs where more documentation is to be found.",
              "example": "http://localhost/doc"
            }
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "API Attributes": {
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "API name",
            "example": "Hello World"
          },
          "codeRepository": {
            "type": "string",
            "description": "URL to the main API code repository",
            "example": "http//github/helloworld"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "Json:api Container Object": {
        "type": "object",
        "properties": {
          "data": {
            "type": "object",
            "description": "Resource/collection main object"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "object",
              "description": "Urls connecting this resource/collection with other related resources/collections"
            },
            "description": "Urls connecting this resource/collection with other related resources/collections"
          },
          "meta": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Human readable metadata"
            },
            "description": "Human readable metadata"
          },
          "jsonapi": {
            "type": "object",
            "additionalProperties": {
              "type": "string",
              "description": "Generic JSON:API implementation details"
            },
            "description": "Generic JSON:API implementation details"
          },
          "included": {
            "type": "array",
            "description": "Contains all related entities linked with the content returned inside \u0027data\u0027",
            "items": {
              "$ref": "#/components/schemas/Json:api Container Related Object"
            }
          },
          "errors": {
            "type": "array",
            "description": "Contains all errors in the request",
            "items": {
              "$ref": "#/components/schemas/JsonApiError"
            }
          }
        },
        "description": "This object is the container object used in all responses from the API."
      },
      "Json:api Container Related Object": {
        "required": [
          "id"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          }
        },
        "description": "Contains all related entities linked with the content returned inside \u0027data\u0027"
      },
      "JsonApiError": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The HTTP status code applicable to this problem."
          },
          "title": {
            "type": "string",
            "description": "A short, human-readable summary of the problem."
          }
        },
        "description": "Contains all errors in the request"
      },
      "API": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "api:element"
          },
          "attributes": {
            "$ref": "#/components/schemas/API Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "description": "Core API entity used to describe an API"
      },
      "ServerResponse": {
        "type": "object"
      },
      "API Version Attributes": {
        "type": "object",
        "properties": {
          "version": {
            "type": "string",
            "description": "URL to the main API code repository",
            "example": "http//github/helloworld"
          },
          "created": {
            "type": "string",
            "description": "Date created",
            "format": "date-time"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "API Version": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "version:element"
          },
          "attributes": {
            "$ref": "#/components/schemas/API Version Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "description": "Core version entity used to describe an API version"
      },
      "Classification": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "classification:element"
          },
          "relationships": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/Classification Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "description": "Connection object between the taxonomy and an API"
      },
      "Classification Attributes": {
        "type": "object",
        "properties": {
          "urn": {
            "type": "string"
          },
          "taxonomyVersion": {
            "type": "string"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "Link": {
        "type": "object",
        "properties": {
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          },
          "self": {
            "type": "string",
            "format": "uri",
            "writeOnly": true
          }
        }
      },
      "Metadata Attributes": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "visibility": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "api version": {
            "type": "string"
          },
          "release status": {
            "type": "string"
          },
          "system identifier": {
            "type": "string"
          },
          "documentation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "interface specification": {
            "type": "string"
          },
          "interface description language": {
            "type": "string"
          },
          "architecture layer": {
            "type": "string"
          },
          "business unit": {
            "type": "string"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "Metadata": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "metadata:element"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "object"
            },
            "readOnly": true
          },
          "attributes": {
            "$ref": "#/components/schemas/Metadata Attributes"
          }
        },
        "description": "Object describing the metadata collection for each API version"
      },
      "Taxonomy Collection": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "taxonomy:element"
          },
          "attributes": {
            "$ref": "#/components/schemas/Taxonomy Collection Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "description": "Core taxonomy collection entity used to describe a taxonomy collection"
      },
      "Taxonomy Collection Attributes": {
        "required": [
          "description",
          "name",
          "nid"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Taxonomy name",
            "example": "My First Taxonomy"
          },
          "nid": {
            "type": "string",
            "description": "NID identifier (alphanum) 0*30(ldh) (alphanum)",
            "example": "apimap"
          },
          "description": {
            "type": "string",
            "description": "Short taxonomy description",
            "example": "This taxonomy is used to classify My Organization APIs"
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "Taxonomy Attributes": {
        "type": "object",
        "properties": {
          "urn": {
            "type": "string"
          },
          "title": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "description": {
            "type": "string"
          },
          "type": {
            "type": "string",
            "enum": [
              "classification",
              "reference",
              "unknown"
            ]
          }
        },
        "description": "Object attributes. This object must be used when doing a POST or PUT"
      },
      "Classification Tree Item Attributes": {
        "required": [
          "id",
          "type"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "Unique Object ID",
            "example": "ID1"
          },
          "type": {
            "type": "string",
            "description": "Object type definition",
            "default": "classification:tree"
          },
          "relationships": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/Link"
            }
          },
          "attributes": {
            "$ref": "#/components/schemas/Classification Tree Item Attributes"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            },
            "readOnly": true
          }
        },
        "description": "Classification tree item used to list the taxonomy relations"
      }
    }
  }
}